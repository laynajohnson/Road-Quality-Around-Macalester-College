) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
# changing csv to sf object for mapping, EPSG:4326
combined_sf <- st_as_sf(combined, coords = c("location_longitude", "location_latitude"), crs = 4326)
# creating continuous color palette with turbo color scale from viridis
pal <- colorNumeric(palette = rev(viridis::turbo(100)), domain = combined_sf$accelerometer_y_new)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
radius = 2,  # Adjust size of points
color = ~pal(accelerometer_y_new),  # Continuous color scale
fillOpacity = 0.8,  # Transparency setting
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)  # Display value on hover
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
list.files()
list.files()
getwd()
setwd(C:/Users/layna/OneDrive - macalester.edu/spring_2025/exposures/project/data/test-runs)
setwd("C:/Users/layna/OneDrive - macalester.edu/spring_2025/exposures/project/data/test-runs")
list.files()
knitr::opts_chunk$set(echo = TRUE, error = TRUE, warning = FALSE)
#| cache: true
# changing csv to sf object for mapping, EPSG:4326
combined_sf <- st_as_sf(combined, coords = c("location_longitude", "location_latitude"), crs = 4326)
# creating continuous color palette with turbo color scale from viridis
pal <- colorNumeric(palette = rev(viridis::turbo(100)), domain = combined_sf$accelerometer_y_new)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 1,  # Adjust size of points
color = ~pal(accelerometer_y_new),  # Continuous color scale
fillOpacity = 1,  # Transparency setting
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)  # Display value on hover
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
knitr::opts_chunk$set(echo = TRUE, error = TRUE, warning = FALSE)
#| message: false
library(tidyverse)
library(ggplot2)
library(plotly)
library(sf)
library(leaflet)
library(viridis)
#| message: false
grandOlri <- read_csv("1505_Grand_Ave-2025-11-2_6-49-09 PM.csv")
portlandSaratoga <- read_csv("1760_Portland_Ave-2025-11-2_9-42-04 PM.csv")
#| cache: true
# pivot_longer where accelerometer axis measurements are all in one col instead of separate
portlandSaratoga_long <- portlandSaratoga %>%
mutate(accelerometer_y_new = -1* accelerometer_y) %>%
pivot_longer(cols = c(accelerometer_x, accelerometer_y_new, accelerometer_z),
names_to = "axis", values_to = "acceleration") %>%
mutate(
axis = recode(axis,
"accelerometer_x" = "X",
"accelerometer_y_new" = "Y",
"accelerometer_z" = "Z"),
alpha_value = ifelse(axis == "Y", 1, 0.3)
)
# mutate column to just have time for X axis
portlandSaratoga_long <- portlandSaratoga_long %>%
group_by(accelerometer_local_time) %>%
mutate(
time_label = ifelse(axis == "X", paste("Time:", accelerometer_local_time), "")
) %>%
ungroup()
# plot
p <- ggplot(portlandSaratoga_long, aes(x = accelerometer_local_time, y = acceleration, color = axis, group = axis)) +
geom_line(aes(text = paste(time_label,
"<br>Axis:", axis,
"<br>Acceleration:", acceleration),
alpha = alpha_value)) +
labs(title = "Accelerometer Data", x = "Time", y = "Acceleration", color = "Axis") +
theme_minimal() +
scale_alpha_identity()
p_plotly <- ggplotly(p, tooltip = "text") %>%
layout(
hovermode = "x unified",  # adding trace line/crosshair
shapes = list(
list(
type = "line",
xref = "x",
yref = "paper",
x0 = 0, x1 = 0,
y0 = 0, y1 = 1,
line = list(color = "darkgray", width = 1, dash = "dash")  # Dashed vertical line
)
)
)
p_plotly
#| cache: true
# pivot_longer where accelerometer axis measurements are all in one col instead of separate
grandOlri_long <- grandOlri %>%
mutate(accelerometer_y_new = -1* accelerometer_y) %>%
pivot_longer(cols = c(accelerometer_x, accelerometer_y_new, accelerometer_z),
names_to = "axis", values_to = "acceleration") %>%
mutate(
axis = recode(axis,
"accelerometer_x" = "X",
"accelerometer_y_new" = "Y",
"accelerometer_z" = "Z"),
alpha_value = ifelse(axis == "Y", 1, 0.3)
)
# mutate column to just have time for X axis
grandOlri_long <- grandOlri_long %>%
group_by(accelerometer_local_time) %>%
mutate(
time_label = ifelse(axis == "X", paste("Time:", accelerometer_local_time), "")
) %>%
ungroup()
# plot
p2 <- ggplot(grandOlri_long, aes(x = accelerometer_local_time, y = acceleration, color = axis, group = axis)) +
geom_line(aes(text = paste(time_label,
"<br>Axis:", axis,
"<br>Acceleration:", acceleration),
alpha = alpha_value)) +
labs(title = "Accelerometer Data", x = "Time", y = "Acceleration", color = "Axis") +
theme_minimal() +
scale_alpha_identity()
p_plotly2 <- ggplotly(p2, tooltip = "text") %>%
layout(
hovermode = "x unified",  # adding trace line/crosshair
shapes = list(
list(
type = "line",
xref = "x",
yref = "paper",
x0 = 0, x1 = 0,
y0 = 0, y1 = 1,
line = list(color = "darkgray", width = 1, dash = "dash")  # Dashed vertical line
)
)
)
p_plotly2
combined <- rbind(grandOlri, portlandSaratoga) %>%
mutate(accelerometer_y_new = -1 * accelerometer_y) %>%
filter(!is.na(location_longitude)& !is.na(location_latitude)) %>%
select(-location_altitude, -location_speedAccuracy, -location_bearingAccuracy, - location_altitudeAboveMeanSeaLevel, -location_bearing, -location_horizontalAccuracy, location_verticalAccuracy, -location_speed)
#| cache: true
# changing csv to sf object for mapping, EPSG:4326
combined_sf <- st_as_sf(combined, coords = c("location_longitude", "location_latitude"), crs = 4326)
# creating continuous color palette with turbo color scale from viridis
pal <- colorNumeric(palette = rev(viridis::turbo(100)), domain = combined_sf$accelerometer_y_new)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 1,  # Adjust size of points
color = ~pal(accelerometer_y_new),  # Continuous color scale
fillOpacity = 1,  # Transparency setting
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)  # Display value on hover
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
#| cache: true
# changing csv to sf object for mapping, EPSG:4326
combined_sf <- st_as_sf(combined, coords = c("location_longitude", "location_latitude"), crs = 4326)
# creating continuous color palette with turbo color scale from viridis
pal <- colorNumeric(palette = rev(viridis::turbo(100)), domain = combined_sf$accelerometer_y_new)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 1,  # Adjust size of points
fillColor = ~pal(accelerometer_y_new),  # Continuous color scale
fillOpacity = 1,  # Transparency setting
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)  # Display value on hover
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
#| cache: true
# changing csv to sf object for mapping, EPSG:4326
combined_sf <- st_as_sf(combined, coords = c("location_longitude", "location_latitude"), crs = 4326)
# creating continuous color palette with turbo color scale from viridis
pal <- colorNumeric(palette = rev(viridis::turbo(100)), domain = combined_sf$accelerometer_y_new)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 1,  # Adjust size of points
color = ~pal(accelerometer_y_new),  # Continuous color scale
fillOpacity = 1,  # Transparency setting
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)  # Display value on hover
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
#| cache: true
# changing csv to sf object for mapping, EPSG:4326
combined_sf <- st_as_sf(combined, coords = c("location_longitude", "location_latitude"), crs = 4326)
# creating continuous color palette with turbo color scale from viridis
pal <- colorNumeric(palette = rev(viridis::turbo(100)), domain = combined_sf$accelerometer_y_new)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 1,
color = ~pal(accelerometer_y_new),  # continuous color scale for y acceleration
weight = 2,
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 2,
color = ~pal(accelerometer_y_new),  # continuous color scale for y acceleration
weight = 2,
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 1,
color = ~pal(accelerometer_y_new),  # continuous color scale for y acceleration
weight = 4,
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 2,
color = ~pal(accelerometer_y_new),  # continuous color scale for y acceleration
weight = 4,
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 10,
color = ~pal(accelerometer_y_new),  # continuous color scale for y acceleration
weight = 4,
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
color = ~pal(accelerometer_y_new),  # continuous color scale for y acceleration
weight = 4,
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 1,
color = ~pal(accelerometer_y_new),  # continuous color scale for y acceleration
weight = 4,
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 1,
color = ~pal(accelerometer_y_new),  # continuous color scale for y acceleration
weight = 5,
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 1,
color = ~pal(accelerometer_y_new),  # continuous color scale for y acceleration
weight = 5,
opacity = 1,
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
# Create Leaflet map
leaflet(combined_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
radius = 1,
color = ~pal(accelerometer_y_new),  # continuous color scale for y acceleration
weight = 5,
opacity = 0.9,
popup = ~paste0("Acceleration Y: ", accelerometer_y_new)
) %>%
addLegend(
pal = pal,
values = combined_sf$accelerometer_y_new,
title = "Accelerometer Y",
opacity = 1
)
#| cache: true
# pivot_longer where accelerometer axis measurements are all in one col instead of separate
portlandSaratoga_long <- portlandSaratoga %>%
mutate(accelerometer_y_new = -1* accelerometer_y,
accelerometer_x_new = -1 * accelerometer_x) %>%
pivot_longer(cols = c(accelerometer_x_new, accelerometer_y_new, accelerometer_z),
names_to = "axis", values_to = "acceleration") %>%
mutate(
axis = recode(axis,
"accelerometer_x_new" = "X",
"accelerometer_y_new" = "Y",
"accelerometer_z" = "Z"),
alpha_value = ifelse(axis == "Y", 1, 0.3)
)
# mutate column to just have time for X axis
portlandSaratoga_long <- portlandSaratoga_long %>%
group_by(accelerometer_local_time) %>%
mutate(
time_label = ifelse(axis == "X", paste("Time:", accelerometer_local_time), "")
) %>%
ungroup()
# plot
p <- ggplot(portlandSaratoga_long, aes(x = accelerometer_local_time, y = acceleration, color = axis, group = axis)) +
geom_line(aes(text = paste(time_label,
"<br>Axis:", axis,
"<br>Acceleration:", acceleration),
alpha = alpha_value)) +
labs(title = "Accelerometer Data", x = "Time", y = "Acceleration", color = "Axis") +
theme_minimal() +
scale_alpha_identity()
p_plotly <- ggplotly(p, tooltip = "text") %>%
layout(
hovermode = "x unified",  # adding trace line/crosshair
shapes = list(
list(
type = "line",
xref = "x",
yref = "paper",
x0 = 0, x1 = 0,
y0 = 0, y1 = 1,
line = list(color = "darkgray", width = 1, dash = "dash")  # Dashed vertical line
)
)
)
p_plotly
#| cache: true
# pivot_longer where accelerometer axis measurements are all in one col instead of separate
portlandSaratoga_long <- portlandSaratoga %>%
mutate(accelerometer_y_new = -1* accelerometer_y,
accelerometer_x_new = -1 * accelerometer_x) %>%
pivot_longer(cols = c(accelerometer_x_new, accelerometer_y_new, accelerometer_z),
names_to = "axis", values_to = "acceleration") %>%
mutate(
axis = recode(axis,
"accelerometer_x_new" = "X",
"accelerometer_y_new" = "Y",
"accelerometer_z" = "Z"),
alpha_value = ifelse(axis == "Y", 1, 0.3)
)
# mutate column to just have time for X axis
portlandSaratoga_long <- portlandSaratoga_long %>%
group_by(accelerometer_local_time) %>%
mutate(
time_label = ifelse(axis == "X", paste("Time:", accelerometer_local_time), "")
) %>%
ungroup()
# plot
p <- ggplot(portlandSaratoga_long, aes(x = accelerometer_local_time, y = acceleration, color = axis, group = axis)) +
geom_line(aes(text = paste(time_label,
"<br>Axis:", axis,
"<br>Acceleration:", acceleration),
alpha = alpha_value)) +
labs(title = "Acceleration - Portland Ave to Saratoga St", x = "Time", y = "Acceleration", color = "Axis") +
theme_minimal() +
scale_alpha_identity()
p_plotly <- ggplotly(p, tooltip = "text") %>%
layout(
hovermode = "x unified",  # adding trace line/crosshair
shapes = list(
list(
type = "line",
xref = "x",
yref = "paper",
x0 = 0, x1 = 0,
y0 = 0, y1 = 1,
line = list(color = "darkgray", width = 1, dash = "dash")  # Dashed vertical line
)
)
)
p_plotly
#| cache: true
# pivot_longer where accelerometer axis measurements are all in one col instead of separate
grandOlri_long <- grandOlri %>%
mutate(accelerometer_y_new = -1* accelerometer_y,
accelerometer_x_new = -1 * accelerometer_x) %>%
pivot_longer(cols = c(accelerometer_x_new, accelerometer_y_new, accelerometer_z),
names_to = "axis", values_to = "acceleration") %>%
mutate(
axis = recode(axis,
"accelerometer_x_new" = "X",
"accelerometer_y_new" = "Y",
"accelerometer_z" = "Z"),
alpha_value = ifelse(axis == "Y", 1, 0.3)
)
# mutate column to just have time for X axis
grandOlri_long <- grandOlri_long %>%
group_by(accelerometer_local_time) %>%
mutate(
time_label = ifelse(axis == "X", paste("Time:", accelerometer_local_time), "")
) %>%
ungroup()
# plot
p2 <- ggplot(grandOlri_long, aes(x = accelerometer_local_time, y = acceleration, color = axis, group = axis)) +
geom_line(aes(text = paste(time_label,
"<br>Axis:", axis,
"<br>Acceleration:", acceleration),
alpha = alpha_value)) +
labs(title = "Acceleration - Saratoga St to Macalester St", x = "Time", y = "Acceleration", color = "Axis") +
theme_minimal() +
scale_alpha_identity()
p_plotly2 <- ggplotly(p2, tooltip = "text") %>%
layout(
hovermode = "x unified",  # adding trace line/crosshair
shapes = list(
list(
type = "line",
xref = "x",
yref = "paper",
x0 = 0, x1 = 0,
y0 = 0, y1 = 1,
line = list(color = "darkgray", width = 1, dash = "dash")  # Dashed vertical line
)
)
)
p_plotly2
combined <- rbind(grandOlri, portlandSaratoga) %>%
mutate(accelerometer_y_new = -1 * accelerometer_y,
accelerometer_x_new = -1 * accelerometer_x) %>%
filter(!is.na(location_longitude)& !is.na(location_latitude)) %>%
select(-location_altitude, -location_speedAccuracy, -location_bearingAccuracy, - location_altitudeAboveMeanSeaLevel, -location_bearing, -location_horizontalAccuracy, location_verticalAccuracy, -location_speed)
